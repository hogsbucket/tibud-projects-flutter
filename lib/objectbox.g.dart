// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'model/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6616238366612463794),
      name: 'Accidents',
      lastPropertyId: const IdUid(10, 7520232748038278577),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8085132607275300696),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8945079294925773047),
            name: 'accBasic',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6552818780104920579),
            name: 'accClaims',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4772217595840132839),
            name: 'doc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9021497143545319861),
            name: 'dod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1455430562005964962),
            name: 'hospital',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1566974131130532251),
            name: 'classification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1788222101871470225),
            name: 'remarks',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5499510841280653825),
            name: 'confinee',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7520232748038278577),
            name: 'relationship',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'accMembers', srcEntity: 'Member', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 4538996385956794291),
      name: 'Contributions',
      lastPropertyId: const IdUid(3, 4808498012821867058),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8900875208024482548),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6081702498866412189),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4808498012821867058),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3448344149221197734),
      name: 'DAC',
      lastPropertyId: const IdUid(6, 3156904636070508949),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9101178823689020107),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2950123791986479112),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8432505190972109898),
            name: 'dod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6430539573320707938),
            name: 'classification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7332375809050664695),
            name: 'relationship',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'dacMembers', srcEntity: 'Member', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(4, 5786412100710403854),
      name: 'Dental',
      lastPropertyId: const IdUid(6, 9055976620516131368),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7767330871716371622),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9123570290336058357),
            name: 'clinic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1091803123625581623),
            name: 'classification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7476366167751657625),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3330447993813885151),
            name: 'confinee',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9055976620516131368),
            name: 'relationship',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'denMembers', srcEntity: 'Member', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(5, 476759643342158719),
      name: 'Direct',
      lastPropertyId: const IdUid(6, 3682268984604281822),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7719388988558809162),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5380614466634214577),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1085713156566535373),
            name: 'relationship',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1372828103218075481),
            name: 'memberId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 729233550886902461),
            relationTarget: 'Member'),
        ModelProperty(
            id: const IdUid(5, 2285748353358802894),
            name: 'age',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3682268984604281822),
            name: 'role',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5252221924896476701),
      name: 'Hospitalization',
      lastPropertyId: const IdUid(10, 6213612305980319691),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5121262100529511156),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5156427414947759578),
            name: 'hosBasic',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2980777192797725353),
            name: 'hosClaims',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7670954280731640809),
            name: 'hospital',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 312731205247392775),
            name: 'doa',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4927704288821334867),
            name: 'dod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 966261577359945013),
            name: 'classification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 126035015952880088),
            name: 'remarks',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7143352603016402760),
            name: 'confinee',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6213612305980319691),
            name: 'relationship',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'hosMembers', srcEntity: 'Member', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(8, 8929075795433266020),
      name: 'Laboratory',
      lastPropertyId: const IdUid(7, 3747697036762805258),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 250992942835996094),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5876524497737211904),
            name: 'labBasic',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8974398931026257600),
            name: 'labClaims',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3185721845714079732),
            name: 'dol',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1079131041596694253),
            name: 'hospital',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8015960668681202498),
            name: 'confinee',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3747697036762805258),
            name: 'relationship',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'labMembers', srcEntity: 'Member', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(9, 1463957562562446774),
      name: 'Member',
      lastPropertyId: const IdUid(5, 2713212363384933928),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4013240693617203300),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6950206009610912461),
            name: 'idno',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4868971031295906487),
            name: 'member',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6646866832938031760),
            name: 'branch',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2713212363384933928),
            name: 'dateOfHire',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7639316237905091443),
            name: 'user',
            targetId: const IdUid(10, 3769832133885239797)),
        ModelRelation(
            id: const IdUid(2, 8646642514439183851),
            name: 'contributions',
            targetId: const IdUid(2, 4538996385956794291)),
        ModelRelation(
            id: const IdUid(4, 1273071966337519091),
            name: 'lab',
            targetId: const IdUid(8, 8929075795433266020)),
        ModelRelation(
            id: const IdUid(5, 2464402361525869478),
            name: 'accident',
            targetId: const IdUid(1, 6616238366612463794)),
        ModelRelation(
            id: const IdUid(6, 4213690826600864652),
            name: 'hospitalization',
            targetId: const IdUid(6, 5252221924896476701)),
        ModelRelation(
            id: const IdUid(7, 7250153777481480373),
            name: 'dac',
            targetId: const IdUid(3, 3448344149221197734)),
        ModelRelation(
            id: const IdUid(8, 1238755653415730261),
            name: 'dental',
            targetId: const IdUid(4, 5786412100710403854)),
        ModelRelation(
            id: const IdUid(10, 7385229520561401049),
            name: 'consult',
            targetId: const IdUid(11, 1039100369912356124))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'direct', srcEntity: 'Direct', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(10, 3769832133885239797),
      name: 'UserAccount',
      lastPropertyId: const IdUid(5, 5018790968126859646),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3345831581918051079),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7682873812696209359),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6767237679222347616),
            name: 'idno',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4733066633833774301),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5018790968126859646),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'members', srcEntity: 'Member', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(11, 1039100369912356124),
      name: 'Consultation',
      lastPropertyId: const IdUid(11, 1326361794804224515),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7068271077309453029),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1031423808397005219),
            name: 'labBasic',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3932583657682095766),
            name: 'labClaims',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 827971042550797619),
            name: 'doc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6585794331288558275),
            name: 'hospital',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7122934134836218452),
            name: 'confinee',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2616206540449271063),
            name: 'relationship',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8534724745789385866),
            name: 'classification',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9090798510495818016),
            name: 'remarks',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8999532295435614771),
            name: 'diagnosis',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1326361794804224515),
            name: 'dod',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'consultMembers', srcEntity: 'Member', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(12, 9169254579111546288),
      name: 'AdminAccount',
      lastPropertyId: const IdUid(3, 3485550547227972214),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7485016618574173207),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1426246043027829607),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3485550547227972214),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 6162217503267888750),
            name: 'activities',
            targetId: const IdUid(14, 145755932700576630))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 145755932700576630),
      name: 'ActivityRecords',
      lastPropertyId: const IdUid(7, 5449779218053302892),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6866246098663625352),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2412781331736630149),
            name: 'activity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2538261834983984371),
            name: 'userAccount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6181265665279674857),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2557018019044419821),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 815139220074509474),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5449779218053302892),
            name: 'idno',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 898849308259173324),
      name: 'DisabledBranch',
      lastPropertyId: const IdUid(3, 7839441539070703624),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8634240440851727431),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1430731834578612124),
            name: 'branch',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7839441539070703624),
            name: 'display',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(15, 898849308259173324),
      lastIndexId: const IdUid(2, 5631215408572733555),
      lastRelationId: const IdUid(11, 6162217503267888750),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5459638766645911991, 1270271962864349312],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4932694111052237382,
        749917723072719171,
        7009093638138749425,
        167967456175128507,
        3156904636070508949,
        1263046802759305653,
        1768963068744919649
      ],
      retiredRelationUids: const [5900527241006885182, 4763994552746292821],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Accidents: EntityDefinition<Accidents>(
        model: _entities[0],
        toOneRelations: (Accidents object) => [],
        toManyRelations: (Accidents object) =>
            {RelInfo<Member>.toManyBacklink(5, object.id): object.accMembers},
        getId: (Accidents object) => object.id,
        setId: (Accidents object, int id) {
          object.id = id;
        },
        objectToFB: (Accidents object, fb.Builder fbb) {
          final docOffset =
              object.doc == null ? null : fbb.writeString(object.doc!);
          final dodOffset =
              object.dod == null ? null : fbb.writeString(object.dod!);
          final hospitalOffset = object.hospital == null
              ? null
              : fbb.writeString(object.hospital!);
          final classificationOffset = object.classification == null
              ? null
              : fbb.writeString(object.classification!);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          final confineeOffset = object.confinee == null
              ? null
              : fbb.writeString(object.confinee!);
          final relationshipOffset = object.relationship == null
              ? null
              : fbb.writeString(object.relationship!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.accBasic);
          fbb.addFloat64(2, object.accClaims);
          fbb.addOffset(3, docOffset);
          fbb.addOffset(4, dodOffset);
          fbb.addOffset(5, hospitalOffset);
          fbb.addOffset(6, classificationOffset);
          fbb.addOffset(7, remarksOffset);
          fbb.addOffset(8, confineeOffset);
          fbb.addOffset(9, relationshipOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Accidents()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..accBasic = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..accClaims = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8)
            ..doc = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..dod = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..hospital = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..classification = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..remarks = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..confinee = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..relationship = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);
          InternalToManyAccess.setRelInfo(
              object.accMembers,
              store,
              RelInfo<Member>.toManyBacklink(5, object.id),
              store.box<Accidents>());
          return object;
        }),
    Contributions: EntityDefinition<Contributions>(
        model: _entities[1],
        toOneRelations: (Contributions object) => [],
        toManyRelations: (Contributions object) => {},
        getId: (Contributions object) => object.id,
        setId: (Contributions object, int id) {
          object.id = id;
        },
        objectToFB: (Contributions object, fb.Builder fbb) {
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addOffset(2, dateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Contributions()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..date = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8);

          return object;
        }),
    DAC: EntityDefinition<DAC>(
        model: _entities[2],
        toOneRelations: (DAC object) => [],
        toManyRelations: (DAC object) =>
            {RelInfo<Member>.toManyBacklink(7, object.id): object.dacMembers},
        getId: (DAC object) => object.id,
        setId: (DAC object, int id) {
          object.id = id;
        },
        objectToFB: (DAC object, fb.Builder fbb) {
          final dodOffset =
              object.dod == null ? null : fbb.writeString(object.dod!);
          final classificationOffset = object.classification == null
              ? null
              : fbb.writeString(object.classification!);
          final relationshipOffset = object.relationship == null
              ? null
              : fbb.writeString(object.relationship!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addOffset(2, dodOffset);
          fbb.addOffset(3, classificationOffset);
          fbb.addOffset(4, relationshipOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DAC()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dod = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..classification = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..relationship = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);
          InternalToManyAccess.setRelInfo(object.dacMembers, store,
              RelInfo<Member>.toManyBacklink(7, object.id), store.box<DAC>());
          return object;
        }),
    Dental: EntityDefinition<Dental>(
        model: _entities[3],
        toOneRelations: (Dental object) => [],
        toManyRelations: (Dental object) =>
            {RelInfo<Member>.toManyBacklink(8, object.id): object.denMembers},
        getId: (Dental object) => object.id,
        setId: (Dental object, int id) {
          object.id = id;
        },
        objectToFB: (Dental object, fb.Builder fbb) {
          final clinicOffset =
              object.clinic == null ? null : fbb.writeString(object.clinic!);
          final classificationOffset = object.classification == null
              ? null
              : fbb.writeString(object.classification!);
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          final confineeOffset = object.confinee == null
              ? null
              : fbb.writeString(object.confinee!);
          final relationshipOffset = object.relationship == null
              ? null
              : fbb.writeString(object.relationship!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, clinicOffset);
          fbb.addOffset(2, classificationOffset);
          fbb.addOffset(3, dateOffset);
          fbb.addOffset(4, confineeOffset);
          fbb.addOffset(5, relationshipOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Dental()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..clinic = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..classification = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..date = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..confinee = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..relationship = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);
          InternalToManyAccess.setRelInfo(
              object.denMembers,
              store,
              RelInfo<Member>.toManyBacklink(8, object.id),
              store.box<Dental>());
          return object;
        }),
    Direct: EntityDefinition<Direct>(
        model: _entities[4],
        toOneRelations: (Direct object) => [object.member],
        toManyRelations: (Direct object) => {},
        getId: (Direct object) => object.id,
        setId: (Direct object, int id) {
          object.id = id;
        },
        objectToFB: (Direct object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final relationshipOffset = object.relationship == null
              ? null
              : fbb.writeString(object.relationship!);
          final ageOffset =
              object.age == null ? null : fbb.writeString(object.age!);
          final roleOffset =
              object.role == null ? null : fbb.writeString(object.role!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, relationshipOffset);
          fbb.addInt64(3, object.member.targetId);
          fbb.addOffset(4, ageOffset);
          fbb.addOffset(5, roleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Direct()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..relationship = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..age = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..role = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);
          object.member.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.member.attach(store);
          return object;
        }),
    Hospitalization: EntityDefinition<Hospitalization>(
        model: _entities[5],
        toOneRelations: (Hospitalization object) => [],
        toManyRelations: (Hospitalization object) =>
            {RelInfo<Member>.toManyBacklink(6, object.id): object.hosMembers},
        getId: (Hospitalization object) => object.id,
        setId: (Hospitalization object, int id) {
          object.id = id;
        },
        objectToFB: (Hospitalization object, fb.Builder fbb) {
          final hospitalOffset = object.hospital == null
              ? null
              : fbb.writeString(object.hospital!);
          final doaOffset =
              object.doa == null ? null : fbb.writeString(object.doa!);
          final dodOffset =
              object.dod == null ? null : fbb.writeString(object.dod!);
          final classificationOffset = object.classification == null
              ? null
              : fbb.writeString(object.classification!);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          final confineeOffset = object.confinee == null
              ? null
              : fbb.writeString(object.confinee!);
          final relationshipOffset = object.relationship == null
              ? null
              : fbb.writeString(object.relationship!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.hosBasic);
          fbb.addFloat64(2, object.hosClaims);
          fbb.addOffset(3, hospitalOffset);
          fbb.addOffset(4, doaOffset);
          fbb.addOffset(5, dodOffset);
          fbb.addOffset(6, classificationOffset);
          fbb.addOffset(7, remarksOffset);
          fbb.addOffset(8, confineeOffset);
          fbb.addOffset(9, relationshipOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Hospitalization()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..hosBasic = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..hosClaims = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8)
            ..hospital = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..doa = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..dod = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..classification = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..remarks = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..confinee = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..relationship = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);
          InternalToManyAccess.setRelInfo(
              object.hosMembers,
              store,
              RelInfo<Member>.toManyBacklink(6, object.id),
              store.box<Hospitalization>());
          return object;
        }),
    Laboratory: EntityDefinition<Laboratory>(
        model: _entities[6],
        toOneRelations: (Laboratory object) => [],
        toManyRelations: (Laboratory object) =>
            {RelInfo<Member>.toManyBacklink(4, object.id): object.labMembers},
        getId: (Laboratory object) => object.id,
        setId: (Laboratory object, int id) {
          object.id = id;
        },
        objectToFB: (Laboratory object, fb.Builder fbb) {
          final dolOffset =
              object.dol == null ? null : fbb.writeString(object.dol!);
          final hospitalOffset = object.hospital == null
              ? null
              : fbb.writeString(object.hospital!);
          final confineeOffset = object.confinee == null
              ? null
              : fbb.writeString(object.confinee!);
          final relationshipOffset = object.relationship == null
              ? null
              : fbb.writeString(object.relationship!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.labBasic);
          fbb.addFloat64(2, object.labClaims);
          fbb.addOffset(3, dolOffset);
          fbb.addOffset(4, hospitalOffset);
          fbb.addOffset(5, confineeOffset);
          fbb.addOffset(6, relationshipOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Laboratory()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..labBasic = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..labClaims = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8)
            ..dol = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..hospital = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..confinee = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..relationship = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16);
          InternalToManyAccess.setRelInfo(
              object.labMembers,
              store,
              RelInfo<Member>.toManyBacklink(4, object.id),
              store.box<Laboratory>());
          return object;
        }),
    Member: EntityDefinition<Member>(
        model: _entities[7],
        toOneRelations: (Member object) => [],
        toManyRelations: (Member object) => {
              RelInfo<Member>.toMany(1, object.id): object.user,
              RelInfo<Member>.toMany(2, object.id): object.contributions,
              RelInfo<Member>.toMany(4, object.id): object.lab,
              RelInfo<Member>.toMany(5, object.id): object.accident,
              RelInfo<Member>.toMany(6, object.id): object.hospitalization,
              RelInfo<Member>.toMany(7, object.id): object.dac,
              RelInfo<Member>.toMany(8, object.id): object.dental,
              RelInfo<Member>.toMany(10, object.id): object.consult,
              RelInfo<Direct>.toOneBacklink(
                      4, object.id, (Direct srcObject) => srcObject.member):
                  object.direct
            },
        getId: (Member object) => object.id,
        setId: (Member object, int id) {
          object.id = id;
        },
        objectToFB: (Member object, fb.Builder fbb) {
          final idnoOffset =
              object.idno == null ? null : fbb.writeString(object.idno!);
          final memberOffset =
              object.member == null ? null : fbb.writeString(object.member!);
          final branchOffset =
              object.branch == null ? null : fbb.writeString(object.branch!);
          final dateOfHireOffset = object.dateOfHire == null
              ? null
              : fbb.writeString(object.dateOfHire!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idnoOffset);
          fbb.addOffset(2, memberOffset);
          fbb.addOffset(3, branchOffset);
          fbb.addOffset(4, dateOfHireOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Member()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..idno = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..member = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..branch = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..dateOfHire = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);
          InternalToManyAccess.setRelInfo(object.user, store,
              RelInfo<Member>.toMany(1, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.contributions, store,
              RelInfo<Member>.toMany(2, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.lab, store,
              RelInfo<Member>.toMany(4, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.accident, store,
              RelInfo<Member>.toMany(5, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.hospitalization, store,
              RelInfo<Member>.toMany(6, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.dac, store,
              RelInfo<Member>.toMany(7, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.dental, store,
              RelInfo<Member>.toMany(8, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(object.consult, store,
              RelInfo<Member>.toMany(10, object.id), store.box<Member>());
          InternalToManyAccess.setRelInfo(
              object.direct,
              store,
              RelInfo<Direct>.toOneBacklink(
                  4, object.id, (Direct srcObject) => srcObject.member),
              store.box<Member>());
          return object;
        }),
    UserAccount: EntityDefinition<UserAccount>(
        model: _entities[8],
        toOneRelations: (UserAccount object) => [],
        toManyRelations: (UserAccount object) =>
            {RelInfo<Member>.toManyBacklink(1, object.id): object.members},
        getId: (UserAccount object) => object.id,
        setId: (UserAccount object, int id) {
          object.id = id;
        },
        objectToFB: (UserAccount object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final idnoOffset =
              object.idno == null ? null : fbb.writeString(object.idno!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, idnoOffset);
          fbb.addOffset(3, usernameOffset);
          fbb.addOffset(4, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserAccount()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..idno = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..username = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);
          InternalToManyAccess.setRelInfo(
              object.members,
              store,
              RelInfo<Member>.toManyBacklink(1, object.id),
              store.box<UserAccount>());
          return object;
        }),
    Consultation: EntityDefinition<Consultation>(
        model: _entities[9],
        toOneRelations: (Consultation object) => [],
        toManyRelations: (Consultation object) => {
              RelInfo<Member>.toManyBacklink(10, object.id):
                  object.consultMembers
            },
        getId: (Consultation object) => object.id,
        setId: (Consultation object, int id) {
          object.id = id;
        },
        objectToFB: (Consultation object, fb.Builder fbb) {
          final docOffset =
              object.doc == null ? null : fbb.writeString(object.doc!);
          final hospitalOffset = object.hospital == null
              ? null
              : fbb.writeString(object.hospital!);
          final confineeOffset = object.confinee == null
              ? null
              : fbb.writeString(object.confinee!);
          final relationshipOffset = object.relationship == null
              ? null
              : fbb.writeString(object.relationship!);
          final classificationOffset = object.classification == null
              ? null
              : fbb.writeString(object.classification!);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          final diagnosisOffset = object.diagnosis == null
              ? null
              : fbb.writeString(object.diagnosis!);
          final dodOffset =
              object.dod == null ? null : fbb.writeString(object.dod!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.labBasic);
          fbb.addFloat64(2, object.labClaims);
          fbb.addOffset(3, docOffset);
          fbb.addOffset(4, hospitalOffset);
          fbb.addOffset(5, confineeOffset);
          fbb.addOffset(6, relationshipOffset);
          fbb.addOffset(7, classificationOffset);
          fbb.addOffset(8, remarksOffset);
          fbb.addOffset(9, diagnosisOffset);
          fbb.addOffset(10, dodOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Consultation()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..labBasic = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..labClaims = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8)
            ..doc = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..hospital = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..confinee = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..relationship = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..classification = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..remarks = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..diagnosis = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..dod = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24);
          InternalToManyAccess.setRelInfo(
              object.consultMembers,
              store,
              RelInfo<Member>.toManyBacklink(10, object.id),
              store.box<Consultation>());
          return object;
        }),
    AdminAccount: EntityDefinition<AdminAccount>(
        model: _entities[10],
        toOneRelations: (AdminAccount object) => [],
        toManyRelations: (AdminAccount object) =>
            {RelInfo<AdminAccount>.toMany(11, object.id): object.activities},
        getId: (AdminAccount object) => object.id,
        setId: (AdminAccount object, int id) {
          object.id = id;
        },
        objectToFB: (AdminAccount object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AdminAccount()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..username = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '');
          InternalToManyAccess.setRelInfo(
              object.activities,
              store,
              RelInfo<AdminAccount>.toMany(11, object.id),
              store.box<AdminAccount>());
          return object;
        }),
    ActivityRecords: EntityDefinition<ActivityRecords>(
        model: _entities[11],
        toOneRelations: (ActivityRecords object) => [],
        toManyRelations: (ActivityRecords object) => {},
        getId: (ActivityRecords object) => object.id,
        setId: (ActivityRecords object, int id) {
          object.id = id;
        },
        objectToFB: (ActivityRecords object, fb.Builder fbb) {
          final activityOffset = object.activity == null
              ? null
              : fbb.writeString(object.activity!);
          final userAccountOffset = object.userAccount == null
              ? null
              : fbb.writeString(object.userAccount!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final idnoOffset =
              object.idno == null ? null : fbb.writeString(object.idno!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, activityOffset);
          fbb.addOffset(2, userAccountOffset);
          fbb.addInt64(3, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(4, passwordOffset);
          fbb.addOffset(5, nameOffset);
          fbb.addOffset(6, idnoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = ActivityRecords()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..activity = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..userAccount = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..date = dateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateValue)
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..idno = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16);

          return object;
        }),
    DisabledBranch: EntityDefinition<DisabledBranch>(
        model: _entities[12],
        toOneRelations: (DisabledBranch object) => [],
        toManyRelations: (DisabledBranch object) => {},
        getId: (DisabledBranch object) => object.id,
        setId: (DisabledBranch object, int id) {
          object.id = id;
        },
        objectToFB: (DisabledBranch object, fb.Builder fbb) {
          final branchOffset =
              object.branch == null ? null : fbb.writeString(object.branch!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, branchOffset);
          fbb.addBool(2, object.display);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DisabledBranch()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..branch = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..display =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Accidents] entity fields to define ObjectBox queries.
class Accidents_ {
  /// see [Accidents.id]
  static final id = QueryIntegerProperty<Accidents>(_entities[0].properties[0]);

  /// see [Accidents.accBasic]
  static final accBasic =
      QueryDoubleProperty<Accidents>(_entities[0].properties[1]);

  /// see [Accidents.accClaims]
  static final accClaims =
      QueryDoubleProperty<Accidents>(_entities[0].properties[2]);

  /// see [Accidents.doc]
  static final doc = QueryStringProperty<Accidents>(_entities[0].properties[3]);

  /// see [Accidents.dod]
  static final dod = QueryStringProperty<Accidents>(_entities[0].properties[4]);

  /// see [Accidents.hospital]
  static final hospital =
      QueryStringProperty<Accidents>(_entities[0].properties[5]);

  /// see [Accidents.classification]
  static final classification =
      QueryStringProperty<Accidents>(_entities[0].properties[6]);

  /// see [Accidents.remarks]
  static final remarks =
      QueryStringProperty<Accidents>(_entities[0].properties[7]);

  /// see [Accidents.confinee]
  static final confinee =
      QueryStringProperty<Accidents>(_entities[0].properties[8]);

  /// see [Accidents.relationship]
  static final relationship =
      QueryStringProperty<Accidents>(_entities[0].properties[9]);
}

/// [Contributions] entity fields to define ObjectBox queries.
class Contributions_ {
  /// see [Contributions.id]
  static final id =
      QueryIntegerProperty<Contributions>(_entities[1].properties[0]);

  /// see [Contributions.amount]
  static final amount =
      QueryDoubleProperty<Contributions>(_entities[1].properties[1]);

  /// see [Contributions.date]
  static final date =
      QueryStringProperty<Contributions>(_entities[1].properties[2]);
}

/// [DAC] entity fields to define ObjectBox queries.
class DAC_ {
  /// see [DAC.id]
  static final id = QueryIntegerProperty<DAC>(_entities[2].properties[0]);

  /// see [DAC.amount]
  static final amount = QueryDoubleProperty<DAC>(_entities[2].properties[1]);

  /// see [DAC.dod]
  static final dod = QueryStringProperty<DAC>(_entities[2].properties[2]);

  /// see [DAC.classification]
  static final classification =
      QueryStringProperty<DAC>(_entities[2].properties[3]);

  /// see [DAC.relationship]
  static final relationship =
      QueryStringProperty<DAC>(_entities[2].properties[4]);
}

/// [Dental] entity fields to define ObjectBox queries.
class Dental_ {
  /// see [Dental.id]
  static final id = QueryIntegerProperty<Dental>(_entities[3].properties[0]);

  /// see [Dental.clinic]
  static final clinic = QueryStringProperty<Dental>(_entities[3].properties[1]);

  /// see [Dental.classification]
  static final classification =
      QueryStringProperty<Dental>(_entities[3].properties[2]);

  /// see [Dental.date]
  static final date = QueryStringProperty<Dental>(_entities[3].properties[3]);

  /// see [Dental.confinee]
  static final confinee =
      QueryStringProperty<Dental>(_entities[3].properties[4]);

  /// see [Dental.relationship]
  static final relationship =
      QueryStringProperty<Dental>(_entities[3].properties[5]);
}

/// [Direct] entity fields to define ObjectBox queries.
class Direct_ {
  /// see [Direct.id]
  static final id = QueryIntegerProperty<Direct>(_entities[4].properties[0]);

  /// see [Direct.name]
  static final name = QueryStringProperty<Direct>(_entities[4].properties[1]);

  /// see [Direct.relationship]
  static final relationship =
      QueryStringProperty<Direct>(_entities[4].properties[2]);

  /// see [Direct.member]
  static final member =
      QueryRelationToOne<Direct, Member>(_entities[4].properties[3]);

  /// see [Direct.age]
  static final age = QueryStringProperty<Direct>(_entities[4].properties[4]);

  /// see [Direct.role]
  static final role = QueryStringProperty<Direct>(_entities[4].properties[5]);
}

/// [Hospitalization] entity fields to define ObjectBox queries.
class Hospitalization_ {
  /// see [Hospitalization.id]
  static final id =
      QueryIntegerProperty<Hospitalization>(_entities[5].properties[0]);

  /// see [Hospitalization.hosBasic]
  static final hosBasic =
      QueryDoubleProperty<Hospitalization>(_entities[5].properties[1]);

  /// see [Hospitalization.hosClaims]
  static final hosClaims =
      QueryDoubleProperty<Hospitalization>(_entities[5].properties[2]);

  /// see [Hospitalization.hospital]
  static final hospital =
      QueryStringProperty<Hospitalization>(_entities[5].properties[3]);

  /// see [Hospitalization.doa]
  static final doa =
      QueryStringProperty<Hospitalization>(_entities[5].properties[4]);

  /// see [Hospitalization.dod]
  static final dod =
      QueryStringProperty<Hospitalization>(_entities[5].properties[5]);

  /// see [Hospitalization.classification]
  static final classification =
      QueryStringProperty<Hospitalization>(_entities[5].properties[6]);

  /// see [Hospitalization.remarks]
  static final remarks =
      QueryStringProperty<Hospitalization>(_entities[5].properties[7]);

  /// see [Hospitalization.confinee]
  static final confinee =
      QueryStringProperty<Hospitalization>(_entities[5].properties[8]);

  /// see [Hospitalization.relationship]
  static final relationship =
      QueryStringProperty<Hospitalization>(_entities[5].properties[9]);
}

/// [Laboratory] entity fields to define ObjectBox queries.
class Laboratory_ {
  /// see [Laboratory.id]
  static final id =
      QueryIntegerProperty<Laboratory>(_entities[6].properties[0]);

  /// see [Laboratory.labBasic]
  static final labBasic =
      QueryDoubleProperty<Laboratory>(_entities[6].properties[1]);

  /// see [Laboratory.labClaims]
  static final labClaims =
      QueryDoubleProperty<Laboratory>(_entities[6].properties[2]);

  /// see [Laboratory.dol]
  static final dol =
      QueryStringProperty<Laboratory>(_entities[6].properties[3]);

  /// see [Laboratory.hospital]
  static final hospital =
      QueryStringProperty<Laboratory>(_entities[6].properties[4]);

  /// see [Laboratory.confinee]
  static final confinee =
      QueryStringProperty<Laboratory>(_entities[6].properties[5]);

  /// see [Laboratory.relationship]
  static final relationship =
      QueryStringProperty<Laboratory>(_entities[6].properties[6]);
}

/// [Member] entity fields to define ObjectBox queries.
class Member_ {
  /// see [Member.id]
  static final id = QueryIntegerProperty<Member>(_entities[7].properties[0]);

  /// see [Member.idno]
  static final idno = QueryStringProperty<Member>(_entities[7].properties[1]);

  /// see [Member.member]
  static final member = QueryStringProperty<Member>(_entities[7].properties[2]);

  /// see [Member.branch]
  static final branch = QueryStringProperty<Member>(_entities[7].properties[3]);

  /// see [Member.dateOfHire]
  static final dateOfHire =
      QueryStringProperty<Member>(_entities[7].properties[4]);

  /// see [Member.user]
  static final user =
      QueryRelationToMany<Member, UserAccount>(_entities[7].relations[0]);

  /// see [Member.contributions]
  static final contributions =
      QueryRelationToMany<Member, Contributions>(_entities[7].relations[1]);

  /// see [Member.lab]
  static final lab =
      QueryRelationToMany<Member, Laboratory>(_entities[7].relations[2]);

  /// see [Member.accident]
  static final accident =
      QueryRelationToMany<Member, Accidents>(_entities[7].relations[3]);

  /// see [Member.hospitalization]
  static final hospitalization =
      QueryRelationToMany<Member, Hospitalization>(_entities[7].relations[4]);

  /// see [Member.dac]
  static final dac =
      QueryRelationToMany<Member, DAC>(_entities[7].relations[5]);

  /// see [Member.dental]
  static final dental =
      QueryRelationToMany<Member, Dental>(_entities[7].relations[6]);

  /// see [Member.consult]
  static final consult =
      QueryRelationToMany<Member, Consultation>(_entities[7].relations[7]);
}

/// [UserAccount] entity fields to define ObjectBox queries.
class UserAccount_ {
  /// see [UserAccount.id]
  static final id =
      QueryIntegerProperty<UserAccount>(_entities[8].properties[0]);

  /// see [UserAccount.name]
  static final name =
      QueryStringProperty<UserAccount>(_entities[8].properties[1]);

  /// see [UserAccount.idno]
  static final idno =
      QueryStringProperty<UserAccount>(_entities[8].properties[2]);

  /// see [UserAccount.username]
  static final username =
      QueryStringProperty<UserAccount>(_entities[8].properties[3]);

  /// see [UserAccount.password]
  static final password =
      QueryStringProperty<UserAccount>(_entities[8].properties[4]);
}

/// [Consultation] entity fields to define ObjectBox queries.
class Consultation_ {
  /// see [Consultation.id]
  static final id =
      QueryIntegerProperty<Consultation>(_entities[9].properties[0]);

  /// see [Consultation.labBasic]
  static final labBasic =
      QueryDoubleProperty<Consultation>(_entities[9].properties[1]);

  /// see [Consultation.labClaims]
  static final labClaims =
      QueryDoubleProperty<Consultation>(_entities[9].properties[2]);

  /// see [Consultation.doc]
  static final doc =
      QueryStringProperty<Consultation>(_entities[9].properties[3]);

  /// see [Consultation.hospital]
  static final hospital =
      QueryStringProperty<Consultation>(_entities[9].properties[4]);

  /// see [Consultation.confinee]
  static final confinee =
      QueryStringProperty<Consultation>(_entities[9].properties[5]);

  /// see [Consultation.relationship]
  static final relationship =
      QueryStringProperty<Consultation>(_entities[9].properties[6]);

  /// see [Consultation.classification]
  static final classification =
      QueryStringProperty<Consultation>(_entities[9].properties[7]);

  /// see [Consultation.remarks]
  static final remarks =
      QueryStringProperty<Consultation>(_entities[9].properties[8]);

  /// see [Consultation.diagnosis]
  static final diagnosis =
      QueryStringProperty<Consultation>(_entities[9].properties[9]);

  /// see [Consultation.dod]
  static final dod =
      QueryStringProperty<Consultation>(_entities[9].properties[10]);
}

/// [AdminAccount] entity fields to define ObjectBox queries.
class AdminAccount_ {
  /// see [AdminAccount.id]
  static final id =
      QueryIntegerProperty<AdminAccount>(_entities[10].properties[0]);

  /// see [AdminAccount.username]
  static final username =
      QueryStringProperty<AdminAccount>(_entities[10].properties[1]);

  /// see [AdminAccount.password]
  static final password =
      QueryStringProperty<AdminAccount>(_entities[10].properties[2]);

  /// see [AdminAccount.activities]
  static final activities = QueryRelationToMany<AdminAccount, ActivityRecords>(
      _entities[10].relations[0]);
}

/// [ActivityRecords] entity fields to define ObjectBox queries.
class ActivityRecords_ {
  /// see [ActivityRecords.id]
  static final id =
      QueryIntegerProperty<ActivityRecords>(_entities[11].properties[0]);

  /// see [ActivityRecords.activity]
  static final activity =
      QueryStringProperty<ActivityRecords>(_entities[11].properties[1]);

  /// see [ActivityRecords.userAccount]
  static final userAccount =
      QueryStringProperty<ActivityRecords>(_entities[11].properties[2]);

  /// see [ActivityRecords.date]
  static final date =
      QueryIntegerProperty<ActivityRecords>(_entities[11].properties[3]);

  /// see [ActivityRecords.password]
  static final password =
      QueryStringProperty<ActivityRecords>(_entities[11].properties[4]);

  /// see [ActivityRecords.name]
  static final name =
      QueryStringProperty<ActivityRecords>(_entities[11].properties[5]);

  /// see [ActivityRecords.idno]
  static final idno =
      QueryStringProperty<ActivityRecords>(_entities[11].properties[6]);
}

/// [DisabledBranch] entity fields to define ObjectBox queries.
class DisabledBranch_ {
  /// see [DisabledBranch.id]
  static final id =
      QueryIntegerProperty<DisabledBranch>(_entities[12].properties[0]);

  /// see [DisabledBranch.branch]
  static final branch =
      QueryStringProperty<DisabledBranch>(_entities[12].properties[1]);

  /// see [DisabledBranch.display]
  static final display =
      QueryBooleanProperty<DisabledBranch>(_entities[12].properties[2]);
}
